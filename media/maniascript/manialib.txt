<script><!--
/**
 * ManiaLib for ManiaScript
 *
 * This framework is not finished, not documented, not very useful and quite 
 * possibly full of bugs. We'll also probably break everything at some point to
 * refactor the code. However it's LGPL, so you can use at your own risk :)
 * 
 * Features:
 *     Utils:
 *         text length
 *         max/min (reals)
 *
 *     Effects:
 *         hide/show/toggle
 *
 *     UI primitives:
 *         dialog / toggle
 *         add link
 *         tooltip
 *         auto tooltip
 * 
 * Conventions:
 *     Everything is underscore-separated lowercase.
 *     "Protected" vars/funcs start with "_manialib"
 *     Everything else starts with "manialib_"
 *     We create "fake namespaces" with underscores (eg. manialib_ui_xxx)
 *
 * Fake namespaces:
 *     manialib_              Utils & general funcs
 *     manialib_ui_           UI primitives
 *     manialib_event_        Internals (event handling)
 *
 * @copyright   Copyright (c) 2009-2011 NADEO (http://www.nadeo.com)
 * @license     http://www.gnu.org/licenses/lgpl.html LGPL License 3
 * @version     $Revision: 5524 $:
 * @author      $Author: maxime $:
 * @date        $Date: 2011-10-18 15:30:42 +0200 (mar., 18 oct. 2011) $:
 */

#Include "TextLib" as TextLib
#RequireContext CGameManialinkScriptHandler

declare Boolean[Text] _manialib_visibility;
declare Text[][Text] _manialib_event_listeners;
declare Text[][Text] _manialib_event_listeners_dynamic;
declare Text[Text] _manialib_ui_dialog_content;
declare Text[Text] _manialib_ui_dialog_open;
declare Text[Text] _manialib_ui_dialog_close;
declare Text[Text] _manialib_ui_tooltips;
declare Text[Text] _manialib_ui_autotip_tooltip;
declare Text[Text] _manialib_ui_autotip_tooltip_label;
declare Text[Text] _manialib_ui_addlink;

declare Text[Text][Text] _manialib_ui_dialog2;
declare Text _manialib_ui_dialog2_current;
declare Text[Text] _manialib_ui_autotip2;


Integer manialib_strlen(Text text)
{
	declare length = 0;
	while(TextLib::SubString(text, length,1) != "")
	{
		length = length+1;
	}
	return length;
}

Real manialib_max(Real real1, Real real2)
{
	if(real1 > real2)
	{
		return real1;
	}
	return real2;
}

Real manialib_min(Real real1, Real real2)
{
	if(real1 < real2)
	{
		return real1;
	}
	return real2;
}

Void manialib_hide(Text controlId)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	control.Hide();
	_manialib_visibility[controlId] = False;
}

Void manialib_show(Text controlId)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	control.Show();
	_manialib_visibility[controlId] = True;
}

Boolean manialib_visible(Text controlId)
{
	if(_manialib_visibility.existskey(controlId))
	{
		return _manialib_visibility[controlId];
	}
	return True;
}

Void manialib_toggle(Text controlId)
{
	if(manialib_visible(controlId))
	{
		manialib_hide(controlId);
	}
	else
	{
		manialib_show(controlId);
	}
}

Void manialib_posx(Text controlId, Real posx)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	control.PosnX = posx;
}

Void manialib_posy(Text controlId, Real posy)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	control.PosnY = posy;
}

Void manialib_posz(Text controlId, Real posz)
{
	declare CGameManialinkControl control = Page.MainFrame.GetFirstChild(controlId);
	control.PosnZ = posz;
}

Void manialib_event_add_listener(Text controlId, Text listener)
{
	if(!_manialib_event_listeners.existskey(controlId))
	{
		_manialib_event_listeners[controlId] = Text[];
	}
	if(!_manialib_event_listeners[controlId].exists(listener))
	{
		_manialib_event_listeners[controlId].add(listener);
	}
}

Void manialib_event_add_listener_dynamic(Text controlId, Text listener)
{
	if(!_manialib_event_listeners_dynamic.existskey(controlId))
	{
		_manialib_event_listeners_dynamic[controlId] = Text[];
	}
	if(!_manialib_event_listeners_dynamic[controlId].exists(listener))
	{
		_manialib_event_listeners_dynamic[controlId].add(listener);
	}
}


Void manialib_ui_dialog(Text dialogId, Text contentId, Text openId, Text closeId)
{
	manialib_event_add_listener(openId, "dialog");
	manialib_event_add_listener(closeId, "dialog");

	_manialib_ui_dialog_content[dialogId] = contentId;
	_manialib_ui_dialog_open[dialogId] = openId;
	_manialib_ui_dialog_close[dialogId] = closeId;
	
	manialib_hide(dialogId);
}

Void manialib_ui_dialog_listener(CGameManialinkScriptEvent event)
{
	if (event.Type == CGameManialinkScriptEvent::Type::MouseClick)
	{
		if(_manialib_ui_dialog_open.exists(event.ControlId)) 
		{
			declare Text id = _manialib_ui_dialog_open.keyof(event.ControlId);
			manialib_toggle(id);
			manialib_toggle(_manialib_ui_dialog_content[id]);
		}
		else if(_manialib_ui_dialog_close.exists(event.ControlId)) 
		{
			declare Text id = _manialib_ui_dialog_close.keyof(event.ControlId);
			manialib_toggle(id);
			manialib_toggle(_manialib_ui_dialog_content[id]);
		}
	}
}

Void manialib_ui_dialog2(Text openId, Text message, Text actionName, Text actionValue)
{
	manialib_hide("manialib-dialog");
	manialib_event_add_listener(openId, "dialog2");
	_manialib_ui_dialog2[openId] = [
		"message" => message, 
		"actionName" => actionName, 
		"actionValue" => actionValue];
}

Void manialib_ui_dialog2_listener(CGameManialinkScriptEvent event)
{
	if (event.Type == CGameManialinkScriptEvent::Type::MouseClick)
	{
		if(_manialib_ui_dialog2.existskey(event.ControlId))
		{
			_manialib_ui_dialog2_current = event.ControlId;
			declare CGameManialinkLabel message <=> (Page.MainFrame.GetFirstChild("manialib-dialog-message") as CGameManialinkLabel);
			message.SetText(_manialib_ui_dialog2[_manialib_ui_dialog2_current]["message"]);
			manialib_posx("manialib-dialog", 0.0);
			manialib_show("manialib-dialog");
		}
	}
}

Void manialib_ui_dialog2_no_listener(CGameManialinkScriptEvent event)
{
	if (event.Type == CGameManialinkScriptEvent::Type::MouseClick)
	{
		manialib_hide("manialib-dialog");
	}
}

Void manialib_ui_dialog2_yes_listener(CGameManialinkScriptEvent event)
{
	if (event.Type == CGameManialinkScriptEvent::Type::MouseClick)
	{
		manialib_hide("manialib-dialog");
		if(_manialib_ui_dialog2.existskey(_manialib_ui_dialog2_current))
		{
			declare actionValue = _manialib_ui_dialog2[_manialib_ui_dialog2_current]["actionValue"];
			switch(_manialib_ui_dialog2[_manialib_ui_dialog2_current]["actionName"])
			{
				case "manialink":
					OpenLink(actionValue, ::LinkType::ManialinkBrowser);
					
				case "external":
					OpenLink(actionValue, ::LinkType::ExternalBrowser);

				case "goto":
					OpenLink(actionValue, ::LinkType::Goto);
				
				case "none":
					True;
				
				default:
					assert(False);
			}
		}
	}
}

Void manialib_ui_tooltip(Text tooltipId, Text elementId)
{
	manialib_event_add_listener(elementId, "tooltip");

	_manialib_ui_tooltips[elementId] = tooltipId;

	manialib_hide(tooltipId);
}

Void manialib_ui_tooltip_listener(CGameManialinkScriptEvent event)
{
	if (event.Type == CGameManialinkScriptEvent::Type::MouseOver)
	{
		if(_manialib_ui_tooltips.existskey(event.ControlId))
		{
			manialib_show(_manialib_ui_tooltips[event.ControlId]);
		}
	}
	else if (event.Type == CGameManialinkScriptEvent::Type::MouseOut)
	{
		if(_manialib_ui_tooltips.existskey(event.ControlId))
		{
			manialib_hide(_manialib_ui_tooltips[event.ControlId]);
		}
	}
}

Void manialib_ui_autotip(Text tooltipId, Text tooltipTextId, Text elementPrefixId)
{
	manialib_event_add_listener_dynamic(elementPrefixId, "autotip");

	_manialib_ui_autotip_tooltip[elementPrefixId] = tooltipId;
	_manialib_ui_autotip_tooltip_label[elementPrefixId] = tooltipTextId;

	manialib_hide(tooltipId);
}

Void manialib_ui_autotip_listener_dynamic(CGameManialinkScriptEvent event, Text prefixId, Text data)
{
	if(event.Type == CGameManialinkScriptEvent::Type::MouseOver)
	{
		if(_manialib_ui_autotip_tooltip.existskey(prefixId))
		{
			declare labelId = _manialib_ui_autotip_tooltip_label[prefixId];
			declare controlId = _manialib_ui_autotip_tooltip[prefixId];

			declare CGameManialinkLabel label <=> (Page.MainFrame.GetFirstChild(labelId) as CGameManialinkLabel); 
			label.SetText(data);

			declare CGameManialinkControl autotip = Page.MainFrame.GetFirstChild(controlId);
			autotip.PosnX = manialib_min(MouseX, 160.0 - 75.0); // 75 of padding on the right to fit the autotip
			autotip.PosnY = manialib_max(MouseY - 2.0, -90.0 + 15.0);
			autotip.PosnZ = 10.0;

			manialib_show(_manialib_ui_autotip_tooltip[prefixId]);
		}
	}
	else if(event.Type == CGameManialinkScriptEvent::Type::MouseOut)
	{
		if(_manialib_ui_autotip_tooltip.existskey(prefixId))
		{
			manialib_hide(_manialib_ui_autotip_tooltip[prefixId]);
		}
	}
}

Void manialib_ui_autotip2(Text elementId, Text message)
{
	manialib_event_add_listener(elementId, "autotip2");
	_manialib_ui_autotip2[elementId] = message;
}

Void manialib_ui_autotip2_listener(CGameManialinkScriptEvent event)
{
	if(event.Type == CGameManialinkScriptEvent::Type::MouseOver)
	{
		if(_manialib_ui_autotip2.existskey(event.ControlId))
		{
			declare CGameManialinkLabel label <=> (Page.MainFrame.GetFirstChild("manialib-autotip-text") as CGameManialinkLabel); 
			label.SetText(_manialib_ui_autotip2[event.ControlId]);

			declare CGameManialinkControl autotip = Page.MainFrame.GetFirstChild("manialib-autotip");
			autotip.PosnX = manialib_min(MouseX, 160.0 - 75.0); // 75 of padding on the right to fit the autotip
			autotip.PosnY = manialib_max(MouseY - 2.0, -90.0 + 15.0);
			autotip.PosnZ = 5.0;

			manialib_show("manialib-autotip");
		}
	}
	else if(event.Type == CGameManialinkScriptEvent::Type::MouseOut)
	{
		manialib_hide("manialib-autotip");
	}
}

Void manialib_ui_addlink(Text targetElementId, Text link)
{
	manialib_event_add_listener(targetElementId, "addlink");

	_manialib_ui_addlink[targetElementId] = link;
}

Void manialib_ui_addlink_listener(CGameManialinkScriptEvent event)
{
	if (event.Type == CGameManialinkScriptEvent::Type::MouseClick)
	{
		if(_manialib_ui_addlink.existskey(event.ControlId))
		{
			OpenLink(_manialib_ui_addlink[event.ControlId], ::LinkType::Goto);
		}
	}
}

Void manialib_event_listener(CGameManialinkScriptEvent event)
{
	if(event.ControlId == "manialib-dialog-yes")
	{
		manialib_ui_dialog2_yes_listener(event);
	}
	else if(event.ControlId == "manialib-dialog-no")
	{
		manialib_ui_dialog2_no_listener(event);
	}
	if(_manialib_event_listeners.existskey(event.ControlId))
	{
		foreach(listener in _manialib_event_listeners[event.ControlId])
		{
			switch(listener)
			{
				case "dialog": manialib_ui_dialog_listener(event);
				case "dialog2": manialib_ui_dialog2_listener(event);
				case "autotip2": manialib_ui_autotip2_listener(event);
				case "tooltip": manialib_ui_tooltip_listener(event);
				case "addlink": manialib_ui_addlink_listener(event);
			}
		}
	}
	foreach(prefixId => listeners in _manialib_event_listeners_dynamic)
	{
		foreach(listener in listeners)
		{
			declare length = manialib_strlen(prefixId);
			if(TextLib::SubString(event.ControlId, 0, length) == prefixId)
			{
				declare data = TextLib::SubString(event.ControlId, length, 255);
				switch(listener)
				{
					case "autotip": manialib_ui_autotip_listener_dynamic(event, prefixId, data);
				}
			}
		}
	}
}

Void manialib_main_loop()
{
	while(True)
	{
		foreach(Event in PendingEvents)
		{
			manialib_event_listener(Event);
		}
		yield;		 
	}
}

--></script>